import { Context, ServiceSchema } from 'moleculer';
import { wrapMixin, Alias, CustomActionSchema } from '../types/index.js';
import { generateOpenAPISpec } from './generate-doc.js';
import {
  FileNotExistSchema,
  FileTooBigSchema,
  GetOpenApiParams,
  GetOpenApiParamsSchema,
  ServerErrorSchema,
  UnauthorizedErrorSchema,
  ValidationErrorSchema,
} from './openapi-schemas.js';
import { Document } from './types.js';

export type OpenAPIMixinOptions = {
  /**
   * OpenAPI Tags to be applied to this mixin actions
   */
  tags?: string[];
  swaggerUI?: { version?: string };

  /**
   * Default kinds to be used when no kind is specified in the service or action
   */
  defaultKinds?: string[];

  /**
   * Additional options to be set on actions generated by this mixin.
   */
  actionOptions?: CustomActionSchema;

  /**
   * Gives the list of security schemes to apply for a specific action.
   */
  getSecuritySchemes?: (action: Alias) => string[] | undefined | false;
};

export function OpenAPIMixin(options: OpenAPIMixinOptions) {
  const { swaggerUI, tags, defaultKinds, actionOptions, getSecuritySchemes } =
    options;

  return wrapMixin({
    settings: {
      openapi: {
        openapi: '3.0.3',
        info: {
          description: 'Default Moleculer essentials spec',
          version: '0.0.0',
          title: 'Sample API',
        },
        paths: {},
        components: {
          responses: {
            // Standard moleculer responses
            ServerError: {
              description: 'Server errors: 500, 501, 400, 404 and etc...',
              content: { 'application/json': { schema: ServerErrorSchema } },
            },
            UnauthorizedError: {
              description: 'Need auth',
              content: {
                'application/json': { schema: UnauthorizedErrorSchema },
              },
            },
            FileNotExist: {
              description: 'File not exist',
              content: { 'application/json': { schema: FileNotExistSchema } },
            },
            FileTooBig: {
              description: 'File too big',
              content: { 'application/json': { schema: FileTooBigSchema } },
            },
            ValidationError: {
              description: 'Fields invalid',
              content: {
                'application/json': { schema: ValidationErrorSchema },
              },
            },
          },
          schemas: {
            OpenAPIModel: {
              type: 'object',
              properties: {
                openapi: {
                  example: '3.0.3',
                  type: 'string',
                  description: 'OpenAPI version',
                },
                info: {
                  type: 'object',
                  properties: { description: { type: 'string' } },
                },
                tags: { type: 'array', items: { type: 'string' } },
              },
              required: ['openapi'],
            },
          },
        },
      },
    },

    methods: {
      matchesKind(
        openAPINames: string[] | null | undefined,
        kind: string | undefined,
      ): boolean {
        if (openAPINames === null) {
          return false;
        }

        if (!kind) {
          return true;
        }

        return (openAPINames || defaultKinds || []).includes(kind);
      },

      /**
       * Generate the OpenAPI schema for the specified kind.
       */
      async generateSchema(ctx: Context, kind?: string) {
        const doc: Document = JSON.parse(JSON.stringify(this.settings.openapi));

        const [aliases, services] = await Promise.all([
          ctx.call<Alias[], { withActionSchema?: boolean }>('api.listAliases', {
            withActionSchema: true,
          }),
          ctx.call<
            ServiceSchema[],
            { onlyAvailable?: boolean; skipInternal?: boolean }
          >('$node.services', { onlyAvailable: true, skipInternal: true }),
        ]);

        return generateOpenAPISpec({
          doc,
          getSecuritySchemes,
          services: services.filter(svc =>
            this.matchesKind(svc.settings?.openAPINames, kind),
          ),
          aliases: aliases
            .filter(alias => this.matchesKind(alias.action.openAPINames, kind))
            .sort((a, b) => (a.actionName > b.actionName ? 1 : -1)),
        });
      },
    },

    actions: {
      generateDocs: {
        rest: 'GET /openapi.json',
        openapi: {
          summary: 'OpenAPI schema url',
          responses: {
            '200': {
              description: '',
              content: {
                'application/json': {
                  schema: { $ref: '#/components/schemas/OpenAPIModel' },
                },
              },
            },
          },
          tags,
        },
        ...actionOptions,
        params: GetOpenApiParamsSchema,
        handler(ctx: Context<GetOpenApiParams>): Promise<Document> {
          return this.generateSchema(ctx, ctx.params.kind);
        },
      },

      ui: {
        rest: 'GET /ui',
        openapi: {
          summary: 'OpenAPI ui',
          description: 'You can provide any schema file in query param',
          tags,
        },
        ...actionOptions,
        handler(ctx: Context<never, Record<string, unknown>>): string {
          ctx.meta.$responseType = 'text/html';
          ctx.meta.$responseHeaders = {
            'Content-Security-Policy': `default-src 'self' unpkg.com; img-src 'self' data:; script-src-elem 'self' 'unsafe-inline' unpkg.com`,
          };

          const version = swaggerUI?.version || 'latest';

          return `
      <!DOCTYPE html>
      <html lang="en">
        <head>
           <meta charset="utf-8" />
           <title>OpenAPI UI</title>
           <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@${version}/swagger-ui.css"/>
           <link rel="stylesheet" href="https://unpkg.com/normalize.css@8.0.1/normalize.css"/>
        </head>
        <body>
          <div id="swagger-ui">
            <p>Loading...</p>
          </div>

          <script src="https://unpkg.com/swagger-ui-dist@${version}/swagger-ui-bundle.js" crossorigin></script>
          <script src="https://unpkg.com/swagger-ui-dist@${version}/swagger-ui-standalone-preset.js" crossorigin></script>
          <script>
            window.onload = function() {
            window.ui = SwaggerUIBundle({
               url: 'openapi.json',
               dom_id: '#swagger-ui',
               deepLinking: true,
               presets: [
                 SwaggerUIBundle.presets.apis,
                 SwaggerUIStandalonePreset,
               ],
               plugins: [
                 SwaggerUIBundle.plugins.DownloadUrl
               ],
               layout: "StandaloneLayout",
             });
            }
          </script>
        </body>
      </html>`;
        },
      },
    },
  });
}
